name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de análisis de código y seguridad
  code-analysis:
    name: Análisis de Código y Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configurar Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configurar Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Instalar dependencias y herramientas
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt bandit safety flake8
        cd frontend && npm ci

    - name: Lint Python (Flake8)
      run: flake8 backend/app --count --select=E9,F63,F7,F82 --show-source --statistics && flake8 backend/app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint TypeScript (ESLint)
      run: cd frontend && npm run lint

    - name: Análisis de Seguridad (Bandit)
      run: bandit -r backend/app --severity-level high -f json -o bandit-report.json

    - name: Chequeo de Dependencias Vulnerables (Safety)
      run: safety check -r backend/requirements.txt

    - name: Auditoría de Dependencias (npm audit)
      run: cd frontend && npm audit --audit-level=high

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job de tests del backend
  backend-tests:
    name: Tests Backend
    runs-on: ubuntu-latest
    needs: [code-analysis]
    
    services:
      postgres:
        image: postgres:15
        env: { POSTGRES_DB: test_db, POSTGRES_USER: postgres, POSTGRES_PASSWORD: password }
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ['5432:5432']
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ['6379:6379']
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Instalar dependencias
      run: pip install -r backend/requirements.txt pytest pytest-cov pytest-asyncio httpx
    
    - name: Ejecutar tests y verificar cobertura
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        coverage report --fail-under=80
    
    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend

  # Job de tests del frontend
  frontend-tests:
    name: Tests Frontend
    runs-on: ubuntu-latest
    needs: [code-analysis]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Instalar dependencias
      run: cd frontend && npm ci
    
    - name: Ejecutar tests y verificar cobertura
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        npx nyc check-coverage --lines 70 --functions 70 --branches 70 --statements 70
    
    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend

  # Job de build y push de imágenes Docker
  build-and-push:
    name: Build y Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login al Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extraer metadatos de la imagen
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
    
    - name: Build y push imagen
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de análisis de vulnerabilidades de la imagen
  scan-image:
    name: Escaneo de Vulnerabilidades de Imagen
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    
    strategy:
      matrix:
        service: [backend, frontend]
        
    steps:
    - name: Ejecutar Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Subir resultados a GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de deploy a staging
  deploy-staging:
    name: Deploy a Staging
    runs-on: ubuntu-latest
    needs: [scan-image]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.tudominio.com
    
    steps:
    - name: Desplegar a Staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/tuapp
          git pull origin develop
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.monitoring.yml up -d

  # Job de deploy a producción
  deploy-production:
    name: Deploy a Producción
    runs-on: ubuntu-latest
    needs: [scan-image]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://tudominio.com
      
    steps:
    - name: Desplegar a Producción
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tuapp
          git pull origin main
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.monitoring.yml up -d

  # Job de notificaciones
  notify:
    name: Notificaciones
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notificar Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "Deploy a ${{ github.ref == 'refs/heads/main' && 'producción' || 'staging' }} ha ${{ job.status }}."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}