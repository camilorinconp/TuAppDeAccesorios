{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[userRole,setUserRole]=useState(null);const[isInitialized,setIsInitialized]=useState(false);// Verificar estado de autenticación al cargar\nuseEffect(()=>{// Solo verificar si hay cookies que sugieren autenticación previa\nif(document.cookie.includes('access_token')){checkAuthStatus();}else{setIsInitialized(true);}},[]);const checkAuthStatus=async()=>{try{const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const response=await fetch(\"\".concat(API_URL,\"/verify\"),{method:'GET',credentials:'include',// Incluir cookies httpOnly\nheaders:{'Content-Type':'application/json'}});if(response.ok){const userData=await response.json();console.log('Auth verification response:',userData);setIsAuthenticated(true);setUserRole(userData.role);setIsInitialized(true);return true;}else{console.log('Auth verification failed:',response.status);setIsAuthenticated(false);setUserRole(null);setIsInitialized(true);return false;}}catch(error){console.error('Error checking auth status:',error);setIsAuthenticated(false);setUserRole(null);setIsInitialized(true);return false;}};const login=async()=>{return await checkAuthStatus();};const logout=async()=>{try{const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';await fetch(\"\".concat(API_URL,\"/logout\"),{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'}});}catch(error){console.error('Error during logout:',error);}finally{setIsAuthenticated(false);setUserRole(null);}};// No renderizar hasta que se inicialice el estado de auth\nif(!isInitialized){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,userRole,login,logout,checkAuthStatus},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};// Hook para refrescar automáticamente el token\nexport const useTokenRefresh=()=>{const{logout,checkAuthStatus}=useAuth();useEffect(()=>{const interval=setInterval(async()=>{try{const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const response=await fetch(\"\".concat(API_URL,\"/refresh\"),{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'}});if(!response.ok){// Si falla el refresh, verificar estado y cerrar sesión si es necesario\nconst isAuthenticated=await checkAuthStatus();if(!isAuthenticated){logout();}}}catch(error){console.error('Error refreshing token:',error);// Verificar estado de autenticación\nconst isAuthenticated=await checkAuthStatus();if(!isAuthenticated){logout();}}},14*60*1000);// Refrescar cada 14 minutos (antes de que expire a los 15)\nreturn()=>clearInterval(interval);},[logout,checkAuthStatus]);};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}