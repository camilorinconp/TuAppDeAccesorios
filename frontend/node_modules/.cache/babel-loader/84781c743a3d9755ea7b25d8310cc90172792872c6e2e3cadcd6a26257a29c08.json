{"ast":null,"code":"import _objectSpread from\"/Users/user/TuAppDeAccesorios/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// /frontend/src/services/api.ts\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Función para obtener headers de autenticación (ahora con cookies)\nconst getAuthHeaders=()=>{return{'Content-Type':'application/json'// Las cookies se envían automáticamente con credentials: 'include'\n};};const getDistributorAuthHeaders=()=>{return{'Content-Type':'application/json'// Las cookies se envían automáticamente con credentials: 'include'\n};};// Configuración por defecto para todas las peticiones\nconst defaultFetchOptions={credentials:'include'// Incluir cookies en todas las peticiones\n};// Función helper para hacer peticiones a la API con manejo de errores estandarizado\nexport const apiRequest=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=endpoint.startsWith('http')?endpoint:\"\".concat(API_URL).concat(endpoint);const config=_objectSpread(_objectSpread({},defaultFetchOptions),{},{headers:_objectSpread(_objectSpread({},getAuthHeaders()),options.headers)},options);try{const response=await fetch(url,config);// Manejar diferentes códigos de estado\nif(response.status===401){// Token expirado o inválido\ntry{await refreshToken();// Reintentar la petición original con el token refrescado\nconst retryResponse=await fetch(url,config);if(!retryResponse.ok){throw new Error(\"Request failed with status \".concat(retryResponse.status));}return retryResponse.json();}catch(refreshError){// Si falla el refresh, redirigir al login\nwindow.location.href='/login';throw new Error('Session expired. Please login again.');}}if(response.status===403){throw new Error('Access forbidden. You do not have permission to perform this action.');}if(response.status===404){throw new Error('Resource not found.');}if(response.status>=500){throw new Error('Server error. Please try again later.');}if(!response.ok){// Intentar obtener el mensaje de error del servidor\ntry{const errorData=await response.json();throw new Error(errorData.detail||errorData.message||\"Request failed with status \".concat(response.status));}catch(parseError){throw new Error(\"Request failed with status \".concat(response.status));}}// Si la respuesta está vacía, devolver null\nconst contentType=response.headers.get('content-type');if(!contentType||!contentType.includes('application/json')){return null;}return response.json();}catch(error){if(error instanceof Error){throw error;}throw new Error('Network error. Please check your connection and try again.');}};// --- Funciones de Autenticación ---\nexport const loginUser=async(username,password)=>{const details={username:username,password:password};const formBody=Object.keys(details).map(key=>encodeURIComponent(key)+'='+encodeURIComponent(details[key])).join('&');const response=await fetch(\"\".concat(API_URL,\"/token\"),{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:formBody,credentials:'include'// Incluir cookies para recibir el token\n});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'Login failed');}return response.json();};export const loginDistributor=async(username,accessCode)=>{const details={username:username,password:accessCode// Usamos password para el access_code en el formulario\n};const formBody=Object.keys(details).map(key=>encodeURIComponent(key)+'='+encodeURIComponent(details[key])).join('&');const response=await fetch(\"\".concat(API_URL,\"/distributor-token\"),{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:formBody,credentials:'include'// Incluir cookies para recibir el token\n});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'Distributor login failed');}return response.json();};// Función para refrescar el token\nexport const refreshToken=async()=>{const response=await fetch(\"\".concat(API_URL,\"/refresh\"),{method:'POST',credentials:'include'});if(!response.ok){throw new Error('Failed to refresh token');}return response.json();};// Función para cerrar sesión\nexport const logoutUser=async()=>{await fetch(\"\".concat(API_URL,\"/logout\"),{method:'POST',credentials:'include'});};// --- Funciones de la API ---\n// Productos\n// Interfaz para la respuesta paginada de productos\nexport const getProducts=async function(){let skip=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;return apiRequest(\"/products/?skip=\".concat(skip,\"&limit=\").concat(limit));};// Mantener la función anterior para compatibilidad\nexport const getAllProducts=async()=>{const response=await getProducts(0,1000);// Obtener muchos productos\nreturn response.products;};export const createProduct=async product=>{return apiRequest('/products/',{method:'POST',body:JSON.stringify(product)});};export const updateProduct=async(productId,product)=>{return apiRequest(\"/products/\".concat(productId),{method:'PUT',body:JSON.stringify(product)});};// Ventas\nexport const postSale=async saleData=>{return apiRequest('/pos/sales',{method:'POST',body:JSON.stringify(saleData)});};// Consignación\nexport const getDistributorLoansByAccessCode=async accessCode=>{// Ahora usamos el endpoint específico para distribuidores autenticados\nconst loansResponse=await fetch(\"\".concat(API_URL,\"/my-loans\"),_objectSpread({headers:getDistributorAuthHeaders()},defaultFetchOptions));if(!loansResponse.ok)throw new Error('Failed to fetch loans');const loans=await loansResponse.json();// Obtener información de productos\nconst productsResponse=await fetch(\"\".concat(API_URL,\"/products/\"),_objectSpread({headers:getDistributorAuthHeaders()},defaultFetchOptions));if(!productsResponse.ok)throw new Error('Failed to fetch products');const productData=await productsResponse.json();const products=Array.isArray(productData)?productData:productData.products||[];const loansWithProducts=loans.map(loan=>_objectSpread(_objectSpread({},loan),{},{product:products.find(p=>p.id===loan.product_id)||null}));// Como el distribuidor ya está autenticado, creamos un objeto distribuidor placeholder\n// En un escenario real, podrías obtener la información del distribuidor desde el token JWT o un endpoint específico\nconst distributor={id:1,// Este valor será el correcto desde el token JWT\nname:\"Distribuidor Autenticado\",access_code:accessCode,contact_info:\"\"};return{loans:loansWithProducts,distributor};};export const postConsignmentReport=async reportData=>{return apiRequest('/consignments/reports',{method:'POST',headers:getDistributorAuthHeaders(),body:JSON.stringify(reportData)});};// Función para buscar productos\nexport const searchProducts=async query=>{return apiRequest(\"/products/search?q=\".concat(encodeURIComponent(query)));};// Función para eliminar producto\nexport const deleteProduct=async productId=>{return apiRequest(\"/products/\".concat(productId),{method:'DELETE'});};// Función para obtener un producto específico\nexport const getProduct=async productId=>{return apiRequest(\"/products/\".concat(productId));};// Función para verificar disponibilidad de SKU\nexport const checkSkuAvailability=async sku=>{return apiRequest(\"/products/check-sku/\".concat(encodeURIComponent(sku)));};// Función para obtener estadísticas\nexport const getStats=async()=>{return apiRequest('/stats');};// Función para obtener distribuidores\nexport const getDistributors=async()=>{return apiRequest('/distributors/');};// Función para crear distribuidor\nexport const createDistributor=async distributor=>{return apiRequest('/distributors/',{method:'POST',body:JSON.stringify(distributor)});};// Función para actualizar distribuidor\nexport const updateDistributor=async(distributorId,distributor)=>{return apiRequest(\"/distributors/\".concat(distributorId),{method:'PUT',body:JSON.stringify(distributor)});};// Función para obtener préstamos de un distribuidor\nexport const getDistributorLoans=async distributorId=>{return apiRequest(\"/distributors/\".concat(distributorId,\"/loans\"));};// Función para crear préstamo de consignación\nexport const createConsignmentLoan=async loan=>{return apiRequest('/consignments/loans',{method:'POST',body:JSON.stringify(loan)});};// Función para verificar estado de autenticación\nexport const verifyAuth=async()=>{return apiRequest('/verify');};// Función para obtener perfil de usuario\nexport const getUserProfile=async()=>{return apiRequest('/users/me');};// Función helper para manejo de errores de red\nexport const handleApiError=error=>{if(error.message.includes('Network error')){return'Error de conexión. Verifica tu conexión a internet e intenta nuevamente.';}if(error.message.includes('Session expired')){return'Tu sesión ha expirado. Por favor, inicia sesión nuevamente.';}if(error.message.includes('Access forbidden')){return'No tienes permisos para realizar esta acción.';}if(error.message.includes('Server error')){return'Error del servidor. Por favor, intenta más tarde.';}return error.message||'Ha ocurrido un error inesperado.';};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}