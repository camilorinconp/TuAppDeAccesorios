{"ast":null,"code":"// ==================================================================\n// AUTH SLICE - REEMPLAZO DEL CONTEXT API\n// ==================================================================\nimport{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{loginUser,refreshToken as apiRefreshToken,logoutUser,verifyAuth}from'../../services/api';const initialState={isAuthenticated:false,userRole:null,isInitialized:false,isLoading:false,error:null};// Async thunks\nexport const login=createAsyncThunk('auth/login',async(credentials,_ref)=>{let{rejectWithValue}=_ref;try{const response=await loginUser(credentials.username,credentials.password);// La API maneja las cookies automáticamente, pero obtener perfil para rol\nconst profile=await verifyAuth();return{userRole:profile.role};}catch(error){var _error$response,_error$response$data;return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Error en el login');}});export const refreshAuthToken=createAsyncThunk('auth/refreshToken',async(_,_ref2)=>{let{rejectWithValue}=_ref2;try{const response=await apiRefreshToken();return{success:true};}catch(error){var _error$response2,_error$response2$data;return rejectWithValue(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Error al refrescar token');}});export const checkAuthStatus=createAsyncThunk('auth/checkStatus',async(_,_ref3)=>{let{dispatch,rejectWithValue}=_ref3;try{// Verificar autenticación usando la API\nconst profile=await verifyAuth();return{userRole:profile.role,isValid:true};}catch(error){// Si la verificación falla, intentar refrescar\ntry{const refreshResult=await dispatch(refreshAuthToken());if(refreshAuthToken.fulfilled.match(refreshResult)){const profile=await verifyAuth();return{userRole:profile.role,isValid:true};}}catch(refreshError){// Si el refresh también falla, el usuario no está autenticado\n}return rejectWithValue('Authentication verification failed');}});export const logout=createAsyncThunk('auth/logout',async(_,_ref4)=>{let{rejectWithValue}=_ref4;try{await logoutUser();}catch(error){// Ignorar errores de logout en el servidor\nconsole.warn('Logout server error:',error);}// La API maneja la limpieza de cookies automáticamente\n});// Slice\nconst authSlice=createSlice({name:'auth',initialState,reducers:{clearError:state=>{state.error=null;},resetAuth:state=>{Object.assign(state,initialState);}},extraReducers:builder=>{builder// Login\n.addCase(login.pending,state=>{state.isLoading=true;state.error=null;}).addCase(login.fulfilled,(state,action)=>{state.isLoading=false;state.isAuthenticated=true;state.userRole=action.payload.userRole;state.error=null;}).addCase(login.rejected,(state,action)=>{state.isLoading=false;state.isAuthenticated=false;state.userRole=null;state.error=action.payload;})// Refresh token\n.addCase(refreshAuthToken.pending,state=>{state.isLoading=true;}).addCase(refreshAuthToken.fulfilled,(state,action)=>{state.isLoading=false;state.error=null;}).addCase(refreshAuthToken.rejected,(state,action)=>{state.isLoading=false;state.isAuthenticated=false;state.userRole=null;state.error=action.payload;})// Check auth status\n.addCase(checkAuthStatus.pending,state=>{state.isLoading=true;state.isInitialized=false;}).addCase(checkAuthStatus.fulfilled,(state,action)=>{state.isLoading=false;state.isInitialized=true;state.isAuthenticated=action.payload.isValid;state.userRole=action.payload.userRole;state.error=null;}).addCase(checkAuthStatus.rejected,(state,action)=>{state.isLoading=false;state.isInitialized=true;state.isAuthenticated=false;state.userRole=null;state.error=action.payload;})// Logout\n.addCase(logout.pending,state=>{state.isLoading=true;}).addCase(logout.fulfilled,state=>{Object.assign(state,initialState,{isInitialized:true});}).addCase(logout.rejected,state=>{// Siempre limpiar el estado incluso si el logout falla\nObject.assign(state,initialState,{isInitialized:true});});}});export const{clearError,resetAuth}=authSlice.actions;export default authSlice.reducer;// Selectores\nexport const selectAuth=state=>state.auth;export const selectIsAuthenticated=state=>state.auth.isAuthenticated;export const selectUserRole=state=>state.auth.userRole;export const selectIsInitialized=state=>state.auth.isInitialized;export const selectIsLoading=state=>state.auth.isLoading;export const selectAuthError=state=>state.auth.error;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}