{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useDashboardData = () => {\n  const [stats, setStats] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setIsLoading(true);\n\n        // Simular datos del dashboard por ahora\n        // En producción, estas serían llamadas reales a la API\n        const mockStats = {\n          totalProducts: 150,\n          totalInventoryValue: 12450000,\n          // $12,450,000 COP\n          lowStockProducts: 8,\n          outOfStockProducts: 3,\n          totalSales: 245,\n          totalSalesValue: 8750000,\n          // $8,750,000 COP\n          topSellingProducts: [{\n            id: 1,\n            name: 'Funda iPhone 14',\n            sku: 'CASE001',\n            salesCount: 45,\n            revenue: 1125000\n          }, {\n            id: 2,\n            name: 'Cargador Samsung',\n            sku: 'CHAR002',\n            salesCount: 38,\n            revenue: 950000\n          }, {\n            id: 3,\n            name: 'Protector Pantalla',\n            sku: 'PROT003',\n            salesCount: 32,\n            revenue: 640000\n          }, {\n            id: 4,\n            name: 'Cable USB-C',\n            sku: 'CABL004',\n            salesCount: 28,\n            revenue: 420000\n          }, {\n            id: 5,\n            name: 'Audífonos Bluetooth',\n            sku: 'AUDI005',\n            salesCount: 22,\n            revenue: 1100000\n          }],\n          recentSales: [{\n            id: 1,\n            date: '2025-01-07',\n            total: 125000,\n            itemsCount: 3\n          }, {\n            id: 2,\n            date: '2025-01-07',\n            total: 85000,\n            itemsCount: 2\n          }, {\n            id: 3,\n            date: '2025-01-06',\n            total: 190000,\n            itemsCount: 5\n          }, {\n            id: 4,\n            date: '2025-01-06',\n            total: 65000,\n            itemsCount: 1\n          }, {\n            id: 5,\n            date: '2025-01-05',\n            total: 340000,\n            itemsCount: 8\n          }],\n          monthlyRevenue: [{\n            month: 'Ene',\n            revenue: 2450000,\n            sales: 78\n          }, {\n            month: 'Dic',\n            revenue: 3200000,\n            sales: 95\n          }, {\n            month: 'Nov',\n            revenue: 2800000,\n            sales: 82\n          }, {\n            month: 'Oct',\n            revenue: 2100000,\n            sales: 65\n          }, {\n            month: 'Sep',\n            revenue: 2650000,\n            sales: 73\n          }, {\n            month: 'Ago',\n            revenue: 2950000,\n            sales: 88\n          }],\n          categoryDistribution: [{\n            category: 'Fundas',\n            count: 45,\n            percentage: 30\n          }, {\n            category: 'Cargadores',\n            count: 38,\n            percentage: 25.3\n          }, {\n            category: 'Protectores',\n            count: 28,\n            percentage: 18.7\n          }, {\n            category: 'Cables',\n            count: 24,\n            percentage: 16\n          }, {\n            category: 'Audífonos',\n            count: 15,\n            percentage: 10\n          }]\n        };\n\n        // Simular delay de red\n        await new Promise(resolve => setTimeout(resolve, 800));\n        setStats(mockStats);\n        setError(null);\n      } catch (err) {\n        setError('Error al cargar los datos del dashboard');\n        console.error('Dashboard data fetch error:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchDashboardData();\n  }, []);\n  const refreshData = () => {\n    setStats(null);\n    setIsLoading(true);\n    // Re-ejecutar la carga de datos\n    // En producción, esto haría una nueva llamada a la API\n  };\n  return {\n    stats,\n    isLoading,\n    error,\n    refreshData\n  };\n};","map":{"version":3,"names":["useState","useEffect","useDashboardData","stats","setStats","isLoading","setIsLoading","error","setError","fetchDashboardData","mockStats","totalProducts","totalInventoryValue","lowStockProducts","outOfStockProducts","totalSales","totalSalesValue","topSellingProducts","id","name","sku","salesCount","revenue","recentSales","date","total","itemsCount","monthlyRevenue","month","sales","categoryDistribution","category","count","percentage","Promise","resolve","setTimeout","err","console","refreshData"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/hooks/useDashboardData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport interface DashboardStats {\n  totalProducts: number;\n  totalInventoryValue: number;\n  lowStockProducts: number;\n  outOfStockProducts: number;\n  totalSales: number;\n  totalSalesValue: number;\n  topSellingProducts: Array<{\n    id: number;\n    name: string;\n    sku: string;\n    salesCount: number;\n    revenue: number;\n  }>;\n  recentSales: Array<{\n    id: number;\n    date: string;\n    total: number;\n    itemsCount: number;\n  }>;\n  monthlyRevenue: Array<{\n    month: string;\n    revenue: number;\n    sales: number;\n  }>;\n  categoryDistribution: Array<{\n    category: string;\n    count: number;\n    percentage: number;\n  }>;\n}\n\nexport const useDashboardData = () => {\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Simular datos del dashboard por ahora\n        // En producción, estas serían llamadas reales a la API\n        const mockStats: DashboardStats = {\n          totalProducts: 150,\n          totalInventoryValue: 12450000, // $12,450,000 COP\n          lowStockProducts: 8,\n          outOfStockProducts: 3,\n          totalSales: 245,\n          totalSalesValue: 8750000, // $8,750,000 COP\n          topSellingProducts: [\n            { id: 1, name: 'Funda iPhone 14', sku: 'CASE001', salesCount: 45, revenue: 1125000 },\n            { id: 2, name: 'Cargador Samsung', sku: 'CHAR002', salesCount: 38, revenue: 950000 },\n            { id: 3, name: 'Protector Pantalla', sku: 'PROT003', salesCount: 32, revenue: 640000 },\n            { id: 4, name: 'Cable USB-C', sku: 'CABL004', salesCount: 28, revenue: 420000 },\n            { id: 5, name: 'Audífonos Bluetooth', sku: 'AUDI005', salesCount: 22, revenue: 1100000 }\n          ],\n          recentSales: [\n            { id: 1, date: '2025-01-07', total: 125000, itemsCount: 3 },\n            { id: 2, date: '2025-01-07', total: 85000, itemsCount: 2 },\n            { id: 3, date: '2025-01-06', total: 190000, itemsCount: 5 },\n            { id: 4, date: '2025-01-06', total: 65000, itemsCount: 1 },\n            { id: 5, date: '2025-01-05', total: 340000, itemsCount: 8 }\n          ],\n          monthlyRevenue: [\n            { month: 'Ene', revenue: 2450000, sales: 78 },\n            { month: 'Dic', revenue: 3200000, sales: 95 },\n            { month: 'Nov', revenue: 2800000, sales: 82 },\n            { month: 'Oct', revenue: 2100000, sales: 65 },\n            { month: 'Sep', revenue: 2650000, sales: 73 },\n            { month: 'Ago', revenue: 2950000, sales: 88 }\n          ],\n          categoryDistribution: [\n            { category: 'Fundas', count: 45, percentage: 30 },\n            { category: 'Cargadores', count: 38, percentage: 25.3 },\n            { category: 'Protectores', count: 28, percentage: 18.7 },\n            { category: 'Cables', count: 24, percentage: 16 },\n            { category: 'Audífonos', count: 15, percentage: 10 }\n          ]\n        };\n\n        // Simular delay de red\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        setStats(mockStats);\n        setError(null);\n      } catch (err) {\n        setError('Error al cargar los datos del dashboard');\n        console.error('Dashboard data fetch error:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, []);\n\n  const refreshData = () => {\n    setStats(null);\n    setIsLoading(true);\n    // Re-ejecutar la carga de datos\n    // En producción, esto haría una nueva llamada a la API\n  };\n\n  return {\n    stats,\n    isLoading,\n    error,\n    refreshData\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}