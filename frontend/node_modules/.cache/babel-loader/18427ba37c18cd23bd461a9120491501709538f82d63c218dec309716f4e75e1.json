{"ast":null,"code":"// ==================================================================\n// API CLIENT - CLIENTE HTTP CENTRALIZADO\n// ==================================================================\n\nimport { ApiError } from '../types/core';\nclass ApiClient {\n  constructor() {\n    this.baseURL = void 0;\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new ApiError(errorData.message || `HTTP error! status: ${response.status}`, response.status.toString(), errorData);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error;\n      }\n\n      // Error de red o JSON\n      throw new ApiError('Error de conexión con el servidor', 'NETWORK_ERROR', error);\n    }\n  }\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["ApiError","ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","message","status","toString","data","error","get","method","post","body","JSON","stringify","put","delete","apiClient"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/services/apiClient.ts"],"sourcesContent":["// ==================================================================\n// API CLIENT - CLIENTE HTTP CENTRALIZADO\n// ==================================================================\n\nimport { ApiError } from '../types/core';\n\nclass ApiClient {\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new ApiError(\n          errorData.message || `HTTP error! status: ${response.status}`,\n          response.status.toString(),\n          errorData\n        );\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error;\n      }\n      \n      // Error de red o JSON\n      throw new ApiError(\n        'Error de conexión con el servidor',\n        'NETWORK_ERROR',\n        error\n      );\n    }\n  }\n\n  async get<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, { method: 'GET' });\n  }\n\n  async post<T>(endpoint: string, data: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async put<T>(endpoint: string, data: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, { method: 'DELETE' });\n  }\n}\n\nexport const apiClient = new ApiClient();"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,eAAe;AAExC,MAAMC,SAAS,CAAC;EAGdC,WAAWA,CAAA,EAAG;IAAA,KAFNC,OAAO;IAGb,IAAI,CAACA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACzE;EAEA,MAAcC,OAAOA,CACnBC,QAAgB,EAChBC,OAAoB,GAAG,CAAC,CAAC,EACb;IACZ,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,OAAO,GAAGK,QAAQ,EAAE;IAExC,MAAMG,MAAmB,GAAG;MAC1BC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIlB,QAAQ,CAChBgB,SAAS,CAACG,OAAO,IAAI,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,EAC7DP,QAAQ,CAACO,MAAM,CAACC,QAAQ,CAAC,CAAC,EAC1BL,SACF,CAAC;MACH;MAEA,MAAMM,IAAI,GAAG,MAAMT,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,OAAOK,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYvB,QAAQ,EAAE;QAC7B,MAAMuB,KAAK;MACb;;MAEA;MACA,MAAM,IAAIvB,QAAQ,CAChB,mCAAmC,EACnC,eAAe,EACfuB,KACF,CAAC;IACH;EACF;EAEA,MAAMC,GAAGA,CAAIhB,QAAgB,EAAc;IACzC,OAAO,IAAI,CAACD,OAAO,CAAIC,QAAQ,EAAE;MAAEiB,MAAM,EAAE;IAAM,CAAC,CAAC;EACrD;EAEA,MAAMC,IAAIA,CAAIlB,QAAgB,EAAEc,IAAa,EAAc;IACzD,OAAO,IAAI,CAACf,OAAO,CAAIC,QAAQ,EAAE;MAC/BiB,MAAM,EAAE,MAAM;MACdE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEA,MAAMQ,GAAGA,CAAItB,QAAgB,EAAEc,IAAa,EAAc;IACxD,OAAO,IAAI,CAACf,OAAO,CAAIC,QAAQ,EAAE;MAC/BiB,MAAM,EAAE,KAAK;MACbE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEA,MAAMS,MAAMA,CAAIvB,QAAgB,EAAc;IAC5C,OAAO,IAAI,CAACD,OAAO,CAAIC,QAAQ,EAAE;MAAEiB,MAAM,EAAE;IAAS,CAAC,CAAC;EACxD;AACF;AAEA,OAAO,MAAMO,SAAS,GAAG,IAAI/B,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}