{"ast":null,"code":"// ==================================================================\n// AUTH SLICE - REEMPLAZO DEL CONTEXT API\n// ==================================================================\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { loginUser, refreshToken as apiRefreshToken, logoutUser, verifyAuth } from '../../services/api';\nconst initialState = {\n  isAuthenticated: false,\n  userRole: null,\n  isInitialized: false,\n  isLoading: false,\n  error: null,\n  token: null,\n  refreshToken: null\n};\n\n// Async thunks\nexport const login = createAsyncThunk('auth/login', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await loginUser(credentials.username, credentials.password);\n\n    // La API maneja las cookies automáticamente, pero obtener perfil para rol\n    const profile = await verifyAuth();\n    return {\n      token: response.access_token,\n      userRole: profile.role\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Error en el login');\n  }\n});\nexport const refreshAuthToken = createAsyncThunk('auth/refreshToken', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await apiRefreshToken();\n    return {\n      token: response.access_token\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Error al refrescar token');\n  }\n});\nexport const checkAuthStatus = createAsyncThunk('auth/checkStatus', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    // Verificar autenticación usando la API\n    const profile = await verifyAuth();\n    return {\n      userRole: profile.role,\n      isValid: true\n    };\n  } catch (error) {\n    // Si la verificación falla, intentar refrescar\n    try {\n      const refreshResult = await dispatch(refreshAuthToken());\n      if (refreshAuthToken.fulfilled.match(refreshResult)) {\n        const profile = await verifyAuth();\n        return {\n          userRole: profile.role,\n          isValid: true\n        };\n      }\n    } catch (refreshError) {\n      // Si el refresh también falla, el usuario no está autenticado\n    }\n    return rejectWithValue('Authentication verification failed');\n  }\n});\nexport const logout = createAsyncThunk('auth/logout', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    await logoutUser();\n  } catch (error) {\n    // Ignorar errores de logout en el servidor\n    console.warn('Logout server error:', error);\n  }\n  // La API maneja la limpieza de cookies automáticamente\n});\n\n// Slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    resetAuth: state => {\n      Object.assign(state, initialState);\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Login\n    .addCase(login.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken;\n      state.userRole = action.payload.userRole;\n      state.error = null;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = false;\n      state.token = null;\n      state.refreshToken = null;\n      state.userRole = null;\n      state.error = action.payload;\n    })\n\n    // Refresh token\n    .addCase(refreshAuthToken.pending, state => {\n      state.isLoading = true;\n    }).addCase(refreshAuthToken.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken;\n      state.error = null;\n    }).addCase(refreshAuthToken.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = false;\n      state.token = null;\n      state.refreshToken = null;\n      state.userRole = null;\n      state.error = action.payload;\n    })\n\n    // Check auth status\n    .addCase(checkAuthStatus.pending, state => {\n      state.isLoading = true;\n      state.isInitialized = false;\n    }).addCase(checkAuthStatus.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isInitialized = true;\n      state.isAuthenticated = action.payload.isValid;\n      state.token = action.payload.token;\n      state.userRole = action.payload.userRole;\n      state.error = null;\n    }).addCase(checkAuthStatus.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isInitialized = true;\n      state.isAuthenticated = false;\n      state.token = null;\n      state.refreshToken = null;\n      state.userRole = null;\n      state.error = action.payload;\n    })\n\n    // Logout\n    .addCase(logout.pending, state => {\n      state.isLoading = true;\n    }).addCase(logout.fulfilled, state => {\n      Object.assign(state, initialState, {\n        isInitialized: true\n      });\n    }).addCase(logout.rejected, state => {\n      // Siempre limpiar el estado incluso si el logout falla\n      Object.assign(state, initialState, {\n        isInitialized: true\n      });\n    });\n  }\n});\nexport const {\n  clearError,\n  resetAuth\n} = authSlice.actions;\nexport default authSlice.reducer;\n\n// Selectores\nexport const selectAuth = state => state.auth;\nexport const selectIsAuthenticated = state => state.auth.isAuthenticated;\nexport const selectUserRole = state => state.auth.userRole;\nexport const selectIsInitialized = state => state.auth.isInitialized;\nexport const selectIsLoading = state => state.auth.isLoading;\nexport const selectAuthError = state => state.auth.error;\nexport const selectToken = state => state.auth.token;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","refreshToken","apiRefreshToken","logoutUser","verifyAuth","initialState","isAuthenticated","userRole","isInitialized","isLoading","error","token","login","credentials","rejectWithValue","response","username","password","profile","access_token","role","_error$response","_error$response$data","data","detail","refreshAuthToken","_","_error$response2","_error$response2$data","checkAuthStatus","dispatch","isValid","refreshResult","fulfilled","match","refreshError","logout","console","warn","authSlice","name","reducers","clearError","state","resetAuth","Object","assign","extraReducers","builder","addCase","pending","action","payload","rejected","actions","reducer","selectAuth","auth","selectIsAuthenticated","selectUserRole","selectIsInitialized","selectIsLoading","selectAuthError","selectToken"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/store/slices/authSlice.ts"],"sourcesContent":["// ==================================================================\n// AUTH SLICE - REEMPLAZO DEL CONTEXT API\n// ==================================================================\n\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { \n  loginUser, \n  refreshToken as apiRefreshToken, \n  logoutUser, \n  verifyAuth \n} from '../../services/api';\n\nexport interface AuthState {\n  isAuthenticated: boolean;\n  userRole: string | null;\n  isInitialized: boolean;\n  isLoading: boolean;\n  error: string | null;\n  token: string | null;\n  refreshToken: string | null;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  userRole: null,\n  isInitialized: false,\n  isLoading: false,\n  error: null,\n  token: null,\n  refreshToken: null,\n};\n\n// Async thunks\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (credentials: { username: string; password: string }, { rejectWithValue }) => {\n    try {\n      const response = await loginUser(credentials.username, credentials.password);\n      \n      // La API maneja las cookies automáticamente, pero obtener perfil para rol\n      const profile = await verifyAuth();\n      \n      return {\n        token: response.access_token,\n        userRole: profile.role,\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.detail || 'Error en el login');\n    }\n  }\n);\n\nexport const refreshAuthToken = createAsyncThunk(\n  'auth/refreshToken',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await apiRefreshToken();\n      \n      return {\n        token: response.access_token,\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.detail || 'Error al refrescar token');\n    }\n  }\n);\n\nexport const checkAuthStatus = createAsyncThunk(\n  'auth/checkStatus',\n  async (_, { dispatch, rejectWithValue }) => {\n    try {\n      // Verificar autenticación usando la API\n      const profile = await verifyAuth();\n      \n      return {\n        userRole: profile.role,\n        isValid: true,\n      };\n    } catch (error: any) {\n      // Si la verificación falla, intentar refrescar\n      try {\n        const refreshResult = await dispatch(refreshAuthToken());\n        if (refreshAuthToken.fulfilled.match(refreshResult)) {\n          const profile = await verifyAuth();\n          return {\n            userRole: profile.role,\n            isValid: true,\n          };\n        }\n      } catch (refreshError) {\n        // Si el refresh también falla, el usuario no está autenticado\n      }\n      \n      return rejectWithValue('Authentication verification failed');\n    }\n  }\n);\n\nexport const logout = createAsyncThunk(\n  'auth/logout',\n  async (_, { rejectWithValue }) => {\n    try {\n      await logoutUser();\n    } catch (error) {\n      // Ignorar errores de logout en el servidor\n      console.warn('Logout server error:', error);\n    }\n    // La API maneja la limpieza de cookies automáticamente\n  }\n);\n\n// Slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    resetAuth: (state) => {\n      Object.assign(state, initialState);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Login\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isAuthenticated = true;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.userRole = action.payload.userRole;\n        state.error = null;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isAuthenticated = false;\n        state.token = null;\n        state.refreshToken = null;\n        state.userRole = null;\n        state.error = action.payload as string;\n      })\n      \n      // Refresh token\n      .addCase(refreshAuthToken.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(refreshAuthToken.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.error = null;\n      })\n      .addCase(refreshAuthToken.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isAuthenticated = false;\n        state.token = null;\n        state.refreshToken = null;\n        state.userRole = null;\n        state.error = action.payload as string;\n      })\n      \n      // Check auth status\n      .addCase(checkAuthStatus.pending, (state) => {\n        state.isLoading = true;\n        state.isInitialized = false;\n      })\n      .addCase(checkAuthStatus.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isInitialized = true;\n        state.isAuthenticated = action.payload.isValid;\n        state.token = action.payload.token;\n        state.userRole = action.payload.userRole;\n        state.error = null;\n      })\n      .addCase(checkAuthStatus.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isInitialized = true;\n        state.isAuthenticated = false;\n        state.token = null;\n        state.refreshToken = null;\n        state.userRole = null;\n        state.error = action.payload as string;\n      })\n      \n      // Logout\n      .addCase(logout.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(logout.fulfilled, (state) => {\n        Object.assign(state, initialState, { isInitialized: true });\n      })\n      .addCase(logout.rejected, (state) => {\n        // Siempre limpiar el estado incluso si el logout falla\n        Object.assign(state, initialState, { isInitialized: true });\n      });\n  },\n});\n\nexport const { clearError, resetAuth } = authSlice.actions;\nexport default authSlice.reducer;\n\n// Selectores\nexport const selectAuth = (state: { auth: AuthState }) => state.auth;\nexport const selectIsAuthenticated = (state: { auth: AuthState }) => state.auth.isAuthenticated;\nexport const selectUserRole = (state: { auth: AuthState }) => state.auth.userRole;\nexport const selectIsInitialized = (state: { auth: AuthState }) => state.auth.isInitialized;\nexport const selectIsLoading = (state: { auth: AuthState }) => state.auth.isLoading;\nexport const selectAuthError = (state: { auth: AuthState }) => state.auth.error;\nexport const selectToken = (state: { auth: AuthState }) => state.auth.token;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}