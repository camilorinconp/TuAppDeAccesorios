{"ast":null,"code":"// ==================================================================\n// AUTH MIDDLEWARE - REEMPLAZO DEL useTokenRefresh HOOK\n// ==================================================================\nimport{createListenerMiddleware}from'@reduxjs/toolkit';import{refreshAuthToken,logout,selectIsAuthenticated}from'../slices/authSlice';export const authMiddleware=createListenerMiddleware();// Intervalo para refresh automático del token (14 minutos)\nconst TOKEN_REFRESH_INTERVAL=14*60*1000;// 14 minutos en milisegundos\nlet refreshInterval=null;// Listener para iniciar/detener el refresh automático\nauthMiddleware.startListening({predicate:(_,currentState,previousState)=>{const current=currentState;const previous=previousState;// Verificar si cambió el estado de autenticación\nreturn current.auth.isAuthenticated!==previous.auth.isAuthenticated;},effect:async(_,listenerApi)=>{const state=listenerApi.getState();const isAuthenticated=selectIsAuthenticated(state);if(isAuthenticated){// Iniciar refresh automático\nstartTokenRefreshInterval(listenerApi);}else{// Detener refresh automático\nstopTokenRefreshInterval();}}});// Listener para manejar errores de autenticación\nauthMiddleware.startListening({predicate:action=>{var _action$payload;// Detectar errores 401 Unauthorized\nreturn action.type.endsWith('/rejected')&&((_action$payload=action.payload)===null||_action$payload===void 0?void 0:_action$payload.status)===401;},effect:async(_,listenerApi)=>{const state=listenerApi.getState();const isAuthenticated=selectIsAuthenticated(state);if(isAuthenticated){// Intentar refrescar token\nconst refreshResult=await listenerApi.dispatch(refreshAuthToken());if(refreshAuthToken.rejected.match(refreshResult)){// Si el refresh falla, hacer logout\nawait listenerApi.dispatch(logout());}}}});// Función para iniciar el intervalo de refresh\nfunction startTokenRefreshInterval(listenerApi){// Limpiar intervalo existente\nif(refreshInterval){clearInterval(refreshInterval);}// Crear nuevo intervalo\nrefreshInterval=setInterval(async()=>{const state=listenerApi.getState();const isAuthenticated=selectIsAuthenticated(state);if(isAuthenticated){try{const refreshResult=await listenerApi.dispatch(refreshAuthToken());if(refreshAuthToken.rejected.match(refreshResult)){console.warn('Token refresh failed, logging out');await listenerApi.dispatch(logout());}else{console.log('Token refreshed successfully');}}catch(error){console.error('Error during token refresh:',error);await listenerApi.dispatch(logout());}}},TOKEN_REFRESH_INTERVAL);}// Función para detener el intervalo de refresh\nfunction stopTokenRefreshInterval(){if(refreshInterval){clearInterval(refreshInterval);refreshInterval=null;}}// Limpiar intervalo cuando la aplicación se cierre\nif(typeof window!=='undefined'){window.addEventListener('beforeunload',()=>{stopTokenRefreshInterval();});}export default authMiddleware;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}