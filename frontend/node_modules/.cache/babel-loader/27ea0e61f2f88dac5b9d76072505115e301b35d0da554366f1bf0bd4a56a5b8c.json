{"ast":null,"code":"import _objectSpread from\"/Users/user/TuAppDeAccesorios/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Manejo centralizado de errores de API\n */export class APIErrorHandler{/**\n   * Procesa errores de respuesta de la API\n   */static async handleResponse(response){if(response.ok){return response.json();}let errorData;try{errorData=await response.json();}catch(_unused){// Si no se puede parsear el JSON, crear error genérico\nerrorData={message:\"Error \".concat(response.status,\": \").concat(response.statusText),type:'http_error',details:{},status:response.status};}// Agregar código de estado si no está presente\nif(!errorData.status){errorData.status=response.status;}// Procesar tipos específicos de error\nthrow this.createErrorFromAPIResponse(errorData);}/**\n   * Crea una instancia de error específica basada en la respuesta de la API\n   */static createErrorFromAPIResponse(errorData){const error=new Error(errorData.message);error.type=errorData.type;error.details=errorData.details;error.status=errorData.status;return error;}/**\n   * Maneja errores de red y otros errores inesperados\n   */static handleNetworkError(error){if(error.name==='TypeError'&&error.message.includes('fetch')){const networkError=new Error('Error de conexión. Verifica tu conexión a internet.');networkError.type='network_error';networkError.details={};return networkError;}if(error.name==='AbortError'){const timeoutError=new Error('La petición tardó demasiado tiempo. Inténtalo de nuevo.');timeoutError.type='timeout_error';timeoutError.details={};return timeoutError;}// Si ya es un error procesado, devolverlo tal como está\nif(error.type){return error;}// Error genérico\nconst genericError=new Error('Ocurrió un error inesperado');genericError.type='unknown_error';genericError.details={originalError:error.message};return genericError;}/**\n   * Obtiene un mensaje de error amigable para el usuario\n   */static getUserFriendlyMessage(error){const errorType=error.type;const errorDetails=error.details||{};switch(errorType){case'validation_error':if(errorDetails.validation_errors&&Array.isArray(errorDetails.validation_errors)){var _errorDetails$validat;return\"Error de validaci\\xF3n: \".concat(((_errorDetails$validat=errorDetails.validation_errors[0])===null||_errorDetails$validat===void 0?void 0:_errorDetails$validat.msg)||error.message);}return\"Datos inv\\xE1lidos: \".concat(error.message);case'not_found_error':return'El recurso solicitado no fue encontrado';case'duplicate_error':return'Ya existe un recurso con esos datos';case'insufficient_stock_error':if(errorDetails.insufficient_items){const items=errorDetails.insufficient_items;const itemMessages=items.map(item=>\"\".concat(item.product_name,\": disponible \").concat(item.available,\", solicitado \").concat(item.requested));return\"Stock insuficiente:\\n\".concat(itemMessages.join('\\n'));}return'Stock insuficiente para completar la operación';case'business_logic_error':return\"Error en la operaci\\xF3n: \".concat(error.message);case'authentication_error':return'Error de autenticación. Por favor, inicia sesión nuevamente';case'authorization_error':return'No tienes permisos para realizar esta acción';case'database_integrity_error':return'Error de integridad en los datos. Verifica la información';case'database_error':return'Error en la base de datos. Inténtalo más tarde';case'network_error':return'Error de conexión. Verifica tu conexión a internet';case'timeout_error':return'La operación tardó demasiado tiempo. Inténtalo de nuevo';case'internal_server_error':return'Error interno del servidor. Inténtalo más tarde';default:return error.message||'Ocurrió un error inesperado';}}/**\n   * Determina si un error es recuperable (el usuario puede intentar de nuevo)\n   */static isRecoverableError(error){const errorType=error.type;const status=error.status;// Errores de red y timeout son recuperables\nif(errorType==='network_error'||errorType==='timeout_error'){return true;}// Errores 5xx del servidor son recuperables\nif(status>=500){return true;}// Errores 4xx generalmente no son recuperables (excepto 408, 429)\nif(status===408||status===429){return true;}return false;}/**\n   * Determina si el error requiere reautenticación\n   */static requiresReauth(error){const status=error.status;const errorType=error.type;return status===401||errorType==='authentication_error';}}/**\n * Wrapper para fetch que maneja errores automáticamente\n */export async function apiFetch(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Agregar timeout por defecto\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 segundos\nconst response=await fetch(url,_objectSpread(_objectSpread({},options),{},{signal:controller.signal,credentials:'include'// Incluir cookies por defecto\n}));clearTimeout(timeoutId);return await APIErrorHandler.handleResponse(response);}catch(error){throw APIErrorHandler.handleNetworkError(error);}}","map":{"version":3,"names":["APIErrorHandler","handleResponse","response","ok","json","errorData","_unused","message","concat","status","statusText","type","details","createErrorFromAPIResponse","error","Error","handleNetworkError","name","includes","networkError","timeoutError","genericError","originalError","getUserFriendlyMessage","errorType","errorDetails","validation_errors","Array","isArray","_errorDetails$validat","msg","insufficient_items","items","itemMessages","map","item","product_name","available","requested","join","isRecoverableError","requiresReauth","apiFetch","url","options","arguments","length","undefined","controller","AbortController","timeoutId","setTimeout","abort","fetch","_objectSpread","signal","credentials","clearTimeout"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/services/apiErrorHandler.ts"],"sourcesContent":["/**\n * Manejo centralizado de errores de API\n */\n\nexport interface APIError {\n  message: string;\n  type: string;\n  details: Record<string, any>;\n  status?: number;\n}\n\nexport class APIErrorHandler {\n  /**\n   * Procesa errores de respuesta de la API\n   */\n  static async handleResponse(response: Response): Promise<any> {\n    if (response.ok) {\n      return response.json();\n    }\n\n    let errorData: APIError;\n    \n    try {\n      errorData = await response.json();\n    } catch {\n      // Si no se puede parsear el JSON, crear error genérico\n      errorData = {\n        message: `Error ${response.status}: ${response.statusText}`,\n        type: 'http_error',\n        details: {},\n        status: response.status\n      };\n    }\n\n    // Agregar código de estado si no está presente\n    if (!errorData.status) {\n      errorData.status = response.status;\n    }\n\n    // Procesar tipos específicos de error\n    throw this.createErrorFromAPIResponse(errorData);\n  }\n\n  /**\n   * Crea una instancia de error específica basada en la respuesta de la API\n   */\n  private static createErrorFromAPIResponse(errorData: APIError): Error {\n    const error = new Error(errorData.message);\n    (error as any).type = errorData.type;\n    (error as any).details = errorData.details;\n    (error as any).status = errorData.status;\n    \n    return error;\n  }\n\n  /**\n   * Maneja errores de red y otros errores inesperados\n   */\n  static handleNetworkError(error: any): Error {\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      const networkError = new Error('Error de conexión. Verifica tu conexión a internet.');\n      (networkError as any).type = 'network_error';\n      (networkError as any).details = {};\n      return networkError;\n    }\n\n    if (error.name === 'AbortError') {\n      const timeoutError = new Error('La petición tardó demasiado tiempo. Inténtalo de nuevo.');\n      (timeoutError as any).type = 'timeout_error';\n      (timeoutError as any).details = {};\n      return timeoutError;\n    }\n\n    // Si ya es un error procesado, devolverlo tal como está\n    if ((error as any).type) {\n      return error;\n    }\n\n    // Error genérico\n    const genericError = new Error('Ocurrió un error inesperado');\n    (genericError as any).type = 'unknown_error';\n    (genericError as any).details = { originalError: error.message };\n    return genericError;\n  }\n\n  /**\n   * Obtiene un mensaje de error amigable para el usuario\n   */\n  static getUserFriendlyMessage(error: any): string {\n    const errorType = (error as any).type;\n    const errorDetails = (error as any).details || {};\n\n    switch (errorType) {\n      case 'validation_error':\n        if (errorDetails.validation_errors && Array.isArray(errorDetails.validation_errors)) {\n          return `Error de validación: ${errorDetails.validation_errors[0]?.msg || error.message}`;\n        }\n        return `Datos inválidos: ${error.message}`;\n\n      case 'not_found_error':\n        return 'El recurso solicitado no fue encontrado';\n\n      case 'duplicate_error':\n        return 'Ya existe un recurso con esos datos';\n\n      case 'insufficient_stock_error':\n        if (errorDetails.insufficient_items) {\n          const items = errorDetails.insufficient_items;\n          const itemMessages = items.map((item: any) => \n            `${item.product_name}: disponible ${item.available}, solicitado ${item.requested}`\n          );\n          return `Stock insuficiente:\\n${itemMessages.join('\\n')}`;\n        }\n        return 'Stock insuficiente para completar la operación';\n\n      case 'business_logic_error':\n        return `Error en la operación: ${error.message}`;\n\n      case 'authentication_error':\n        return 'Error de autenticación. Por favor, inicia sesión nuevamente';\n\n      case 'authorization_error':\n        return 'No tienes permisos para realizar esta acción';\n\n      case 'database_integrity_error':\n        return 'Error de integridad en los datos. Verifica la información';\n\n      case 'database_error':\n        return 'Error en la base de datos. Inténtalo más tarde';\n\n      case 'network_error':\n        return 'Error de conexión. Verifica tu conexión a internet';\n\n      case 'timeout_error':\n        return 'La operación tardó demasiado tiempo. Inténtalo de nuevo';\n\n      case 'internal_server_error':\n        return 'Error interno del servidor. Inténtalo más tarde';\n\n      default:\n        return error.message || 'Ocurrió un error inesperado';\n    }\n  }\n\n  /**\n   * Determina si un error es recuperable (el usuario puede intentar de nuevo)\n   */\n  static isRecoverableError(error: any): boolean {\n    const errorType = (error as any).type;\n    const status = (error as any).status;\n\n    // Errores de red y timeout son recuperables\n    if (errorType === 'network_error' || errorType === 'timeout_error') {\n      return true;\n    }\n\n    // Errores 5xx del servidor son recuperables\n    if (status >= 500) {\n      return true;\n    }\n\n    // Errores 4xx generalmente no son recuperables (excepto 408, 429)\n    if (status === 408 || status === 429) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Determina si el error requiere reautenticación\n   */\n  static requiresReauth(error: any): boolean {\n    const status = (error as any).status;\n    const errorType = (error as any).type;\n\n    return status === 401 || errorType === 'authentication_error';\n  }\n}\n\n/**\n * Wrapper para fetch que maneja errores automáticamente\n */\nexport async function apiFetch(url: string, options: RequestInit = {}): Promise<any> {\n  try {\n    // Agregar timeout por defecto\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos\n\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal,\n      credentials: 'include' // Incluir cookies por defecto\n    });\n\n    clearTimeout(timeoutId);\n    return await APIErrorHandler.handleResponse(response);\n\n  } catch (error) {\n    throw APIErrorHandler.handleNetworkError(error);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}