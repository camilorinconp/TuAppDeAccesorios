{"ast":null,"code":"import _objectSpread from\"/Users/user/TuAppDeAccesorios/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Manejo centralizado de errores de API\n */export class APIErrorHandler{/**\n   * Procesa errores de respuesta de la API\n   */static async handleResponse(response){if(response.ok){return response.json();}let errorData;try{errorData=await response.json();}catch(_unused){// Si no se puede parsear el JSON, crear error genérico\nerrorData={message:\"Error \".concat(response.status,\": \").concat(response.statusText),type:'http_error',details:{},status:response.status};}// Agregar código de estado si no está presente\nif(!errorData.status){errorData.status=response.status;}// Procesar tipos específicos de error\nthrow this.createErrorFromAPIResponse(errorData);}/**\n   * Crea una instancia de error específica basada en la respuesta de la API\n   */static createErrorFromAPIResponse(errorData){const error=new Error(errorData.message);error.type=errorData.type;error.details=errorData.details;error.status=errorData.status;return error;}/**\n   * Maneja errores de red y otros errores inesperados\n   */static handleNetworkError(error){if(error.name==='TypeError'&&error.message.includes('fetch')){const networkError=new Error('Error de conexión. Verifica tu conexión a internet.');networkError.type='network_error';networkError.details={};return networkError;}if(error.name==='AbortError'){const timeoutError=new Error('La petición tardó demasiado tiempo. Inténtalo de nuevo.');timeoutError.type='timeout_error';timeoutError.details={};return timeoutError;}// Si ya es un error procesado, devolverlo tal como está\nif(error.type){return error;}// Error genérico\nconst genericError=new Error('Ocurrió un error inesperado');genericError.type='unknown_error';genericError.details={originalError:error.message};return genericError;}/**\n   * Obtiene un mensaje de error amigable para el usuario\n   */static getUserFriendlyMessage(error){const errorType=error.type;const errorDetails=error.details||{};switch(errorType){case'validation_error':if(errorDetails.validation_errors&&Array.isArray(errorDetails.validation_errors)){var _errorDetails$validat;return\"Error de validaci\\xF3n: \".concat(((_errorDetails$validat=errorDetails.validation_errors[0])===null||_errorDetails$validat===void 0?void 0:_errorDetails$validat.msg)||error.message);}return\"Datos inv\\xE1lidos: \".concat(error.message);case'not_found_error':return'El recurso solicitado no fue encontrado';case'duplicate_error':return'Ya existe un recurso con esos datos';case'insufficient_stock_error':if(errorDetails.insufficient_items){const items=errorDetails.insufficient_items;const itemMessages=items.map(item=>\"\".concat(item.product_name,\": disponible \").concat(item.available,\", solicitado \").concat(item.requested));return\"Stock insuficiente:\\n\".concat(itemMessages.join('\\n'));}return'Stock insuficiente para completar la operación';case'business_logic_error':return\"Error en la operaci\\xF3n: \".concat(error.message);case'authentication_error':return'Error de autenticación. Por favor, inicia sesión nuevamente';case'authorization_error':return'No tienes permisos para realizar esta acción';case'database_integrity_error':return'Error de integridad en los datos. Verifica la información';case'database_error':return'Error en la base de datos. Inténtalo más tarde';case'network_error':return'Error de conexión. Verifica tu conexión a internet';case'timeout_error':return'La operación tardó demasiado tiempo. Inténtalo de nuevo';case'internal_server_error':return'Error interno del servidor. Inténtalo más tarde';default:return error.message||'Ocurrió un error inesperado';}}/**\n   * Determina si un error es recuperable (el usuario puede intentar de nuevo)\n   */static isRecoverableError(error){const errorType=error.type;const status=error.status;// Errores de red y timeout son recuperables\nif(errorType==='network_error'||errorType==='timeout_error'){return true;}// Errores 5xx del servidor son recuperables\nif(status>=500){return true;}// Errores 4xx generalmente no son recuperables (excepto 408, 429)\nif(status===408||status===429){return true;}return false;}/**\n   * Determina si el error requiere reautenticación\n   */static requiresReauth(error){const status=error.status;const errorType=error.type;return status===401||errorType==='authentication_error';}}/**\n * Wrapper para fetch que maneja errores automáticamente\n */export async function apiFetch(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Agregar timeout por defecto\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 segundos\nconst response=await fetch(url,_objectSpread(_objectSpread({},options),{},{signal:controller.signal,credentials:'include'// Incluir cookies por defecto\n}));clearTimeout(timeoutId);return await APIErrorHandler.handleResponse(response);}catch(error){throw APIErrorHandler.handleNetworkError(error);}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}