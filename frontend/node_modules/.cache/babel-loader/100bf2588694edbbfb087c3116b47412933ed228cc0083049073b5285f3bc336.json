{"ast":null,"code":"// ==================================================================\n// REDUX AUTH HOOK - REEMPLAZO DEL useAuth HOOK\n// ==================================================================\n\nimport { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './useAppDispatch';\nimport { login, logout, checkAuthStatus, clearError, selectAuth, selectIsAuthenticated, selectUserRole, selectIsInitialized, selectIsLoading, selectAuthError } from '../store/slices/authSlice';\nexport const useReduxAuth = () => {\n  const dispatch = useAppDispatch();\n\n  // Selectores\n  const auth = useAppSelector(selectAuth);\n  const isAuthenticated = useAppSelector(selectIsAuthenticated);\n  const userRole = useAppSelector(selectUserRole);\n  const isInitialized = useAppSelector(selectIsInitialized);\n  const isLoading = useAppSelector(selectIsLoading);\n  const error = useAppSelector(selectAuthError);\n\n  // Verificar autenticación al cargar\n  useEffect(() => {\n    if (!isInitialized) {\n      dispatch(checkAuthStatus());\n    }\n  }, [dispatch, isInitialized]);\n\n  // Funciones de acción\n  const handleLogin = async credentials => {\n    const result = await dispatch(login(credentials));\n    return login.fulfilled.match(result);\n  };\n  const handleLogout = async () => {\n    await dispatch(logout());\n  };\n  const handleClearError = () => {\n    dispatch(clearError());\n  };\n  const handleCheckAuthStatus = async () => {\n    const result = await dispatch(checkAuthStatus());\n    return checkAuthStatus.fulfilled.match(result);\n  };\n  return {\n    // Estado\n    isAuthenticated,\n    userRole,\n    isInitialized,\n    isLoading,\n    error,\n    // Acciones\n    login: handleLogin,\n    logout: handleLogout,\n    clearError: handleClearError,\n    checkAuthStatus: handleCheckAuthStatus,\n    // Estado completo (para compatibilidad)\n    auth\n  };\n};\n\n// Hook especializado para verificación de roles\nexport const useAuthRole = () => {\n  const {\n    isAuthenticated,\n    userRole\n  } = useReduxAuth();\n  return {\n    isAuthenticated,\n    userRole,\n    isAdmin: userRole === 'admin',\n    isSalesStaff: userRole === 'sales_staff',\n    hasRole: role => userRole === role,\n    hasAnyRole: roles => roles.includes(userRole || '')\n  };\n};\n\n// Hook para inicialización automática\nexport const useAuthInit = () => {\n  const {\n    isInitialized,\n    checkAuthStatus\n  } = useReduxAuth();\n  useEffect(() => {\n    if (!isInitialized) {\n      checkAuthStatus();\n    }\n  }, [isInitialized, checkAuthStatus]);\n  return {\n    isInitialized\n  };\n};\nexport default useReduxAuth;","map":{"version":3,"names":["useEffect","useAppDispatch","useAppSelector","login","logout","checkAuthStatus","clearError","selectAuth","selectIsAuthenticated","selectUserRole","selectIsInitialized","selectIsLoading","selectAuthError","useReduxAuth","dispatch","auth","isAuthenticated","userRole","isInitialized","isLoading","error","handleLogin","credentials","result","fulfilled","match","handleLogout","handleClearError","handleCheckAuthStatus","useAuthRole","isAdmin","isSalesStaff","hasRole","role","hasAnyRole","roles","includes","useAuthInit"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/hooks/useReduxAuth.ts"],"sourcesContent":["// ==================================================================\n// REDUX AUTH HOOK - REEMPLAZO DEL useAuth HOOK\n// ==================================================================\n\nimport { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './useAppDispatch';\nimport { \n  login, \n  logout, \n  checkAuthStatus, \n  clearError,\n  selectAuth,\n  selectIsAuthenticated,\n  selectUserRole,\n  selectIsInitialized,\n  selectIsLoading,\n  selectAuthError \n} from '../store/slices/authSlice';\n\nexport const useReduxAuth = () => {\n  const dispatch = useAppDispatch();\n  \n  // Selectores\n  const auth = useAppSelector(selectAuth);\n  const isAuthenticated = useAppSelector(selectIsAuthenticated);\n  const userRole = useAppSelector(selectUserRole);\n  const isInitialized = useAppSelector(selectIsInitialized);\n  const isLoading = useAppSelector(selectIsLoading);\n  const error = useAppSelector(selectAuthError);\n  \n  // Verificar autenticación al cargar\n  useEffect(() => {\n    if (!isInitialized) {\n      dispatch(checkAuthStatus());\n    }\n  }, [dispatch, isInitialized]);\n  \n  // Funciones de acción\n  const handleLogin = async (credentials: { username: string; password: string }) => {\n    const result = await dispatch(login(credentials));\n    return login.fulfilled.match(result);\n  };\n  \n  const handleLogout = async () => {\n    await dispatch(logout());\n  };\n  \n  const handleClearError = () => {\n    dispatch(clearError());\n  };\n  \n  const handleCheckAuthStatus = async () => {\n    const result = await dispatch(checkAuthStatus());\n    return checkAuthStatus.fulfilled.match(result);\n  };\n  \n  return {\n    // Estado\n    isAuthenticated,\n    userRole,\n    isInitialized,\n    isLoading,\n    error,\n    \n    // Acciones\n    login: handleLogin,\n    logout: handleLogout,\n    clearError: handleClearError,\n    checkAuthStatus: handleCheckAuthStatus,\n    \n    // Estado completo (para compatibilidad)\n    auth,\n  };\n};\n\n// Hook especializado para verificación de roles\nexport const useAuthRole = () => {\n  const { isAuthenticated, userRole } = useReduxAuth();\n  \n  return {\n    isAuthenticated,\n    userRole,\n    isAdmin: userRole === 'admin',\n    isSalesStaff: userRole === 'sales_staff',\n    hasRole: (role: string) => userRole === role,\n    hasAnyRole: (roles: string[]) => roles.includes(userRole || ''),\n  };\n};\n\n// Hook para inicialización automática\nexport const useAuthInit = () => {\n  const { isInitialized, checkAuthStatus } = useReduxAuth();\n  \n  useEffect(() => {\n    if (!isInitialized) {\n      checkAuthStatus();\n    }\n  }, [isInitialized, checkAuthStatus]);\n  \n  return { isInitialized };\n};\n\nexport default useReduxAuth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}