{"ast":null,"code":"// /frontend/src/services/api.ts\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Función para obtener headers de autenticación (ahora con cookies)\nconst getAuthHeaders = () => {\n  return {\n    'Content-Type': 'application/json'\n    // Las cookies se envían automáticamente con credentials: 'include'\n  };\n};\nconst getDistributorAuthHeaders = () => {\n  return {\n    'Content-Type': 'application/json'\n    // Las cookies se envían automáticamente con credentials: 'include'\n  };\n};\n\n// Configuración por defecto para todas las peticiones\nconst defaultFetchOptions = {\n  credentials: 'include' // Incluir cookies en todas las peticiones\n};\n\n// Función helper para hacer peticiones a la API con manejo de errores estandarizado\nexport const apiRequest = async (endpoint, options = {}) => {\n  const url = endpoint.startsWith('http') ? endpoint : `${API_URL}${endpoint}`;\n  const config = {\n    ...defaultFetchOptions,\n    headers: {\n      ...getAuthHeaders(),\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n\n    // Manejar diferentes códigos de estado\n    if (response.status === 401) {\n      // Token expirado o inválido\n      try {\n        await refreshToken();\n        // Reintentar la petición original con el token refrescado\n        const retryResponse = await fetch(url, config);\n        if (!retryResponse.ok) {\n          throw new Error(`Request failed with status ${retryResponse.status}`);\n        }\n        return retryResponse.json();\n      } catch (refreshError) {\n        // Si falla el refresh, redirigir al login\n        window.location.href = '/login';\n        throw new Error('Session expired. Please login again.');\n      }\n    }\n    if (response.status === 403) {\n      throw new Error('Access forbidden. You do not have permission to perform this action.');\n    }\n    if (response.status === 404) {\n      throw new Error('Resource not found.');\n    }\n    if (response.status >= 500) {\n      throw new Error('Server error. Please try again later.');\n    }\n    if (!response.ok) {\n      // Intentar obtener el mensaje de error del servidor\n      try {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || errorData.message || `Request failed with status ${response.status}`);\n      } catch (parseError) {\n        throw new Error(`Request failed with status ${response.status}`);\n      }\n    }\n\n    // Si la respuesta está vacía, devolver null\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      return null;\n    }\n    return response.json();\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Network error. Please check your connection and try again.');\n  }\n};\n\n// --- Funciones de Autenticación ---\nexport const loginUser = async (username, password) => {\n  const details = {\n    username: username,\n    password: password\n  };\n  const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n  const response = await fetch(`${API_URL}/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody,\n    credentials: 'include' // Incluir cookies para recibir el token\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'Login failed');\n  }\n  return response.json();\n};\nexport const loginDistributor = async (username, accessCode) => {\n  const details = {\n    username: username,\n    password: accessCode // Usamos password para el access_code en el formulario\n  };\n  const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n  const response = await fetch(`${API_URL}/distributor-token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody,\n    credentials: 'include' // Incluir cookies para recibir el token\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'Distributor login failed');\n  }\n  return response.json();\n};\n\n// Función para refrescar el token\nexport const refreshToken = async () => {\n  const response = await fetch(`${API_URL}/refresh`, {\n    method: 'POST',\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to refresh token');\n  }\n  return response.json();\n};\n\n// Función para cerrar sesión\nexport const logoutUser = async () => {\n  await fetch(`${API_URL}/logout`, {\n    method: 'POST',\n    credentials: 'include'\n  });\n};\n\n// --- Funciones de la API ---\n\n// Productos\n// Interfaz para la respuesta paginada de productos\n\nexport const getProducts = async (skip = 0, limit = 20) => {\n  return apiRequest(`/products/?skip=${skip}&limit=${limit}`);\n};\n\n// Mantener la función anterior para compatibilidad\nexport const getAllProducts = async () => {\n  const response = await getProducts(0, 1000); // Obtener muchos productos\n  return response.products;\n};\nexport const createProduct = async product => {\n  return apiRequest('/products/', {\n    method: 'POST',\n    body: JSON.stringify(product)\n  });\n};\nexport const updateProduct = async (productId, product) => {\n  return apiRequest(`/products/${productId}`, {\n    method: 'PUT',\n    body: JSON.stringify(product)\n  });\n};\n\n// Ventas\nexport const postSale = async saleData => {\n  return apiRequest('/pos/sales', {\n    method: 'POST',\n    body: JSON.stringify(saleData)\n  });\n};\n\n// Consignación\nexport const getDistributorLoansByAccessCode = async accessCode => {\n  // Ahora usamos el endpoint específico para distribuidores autenticados\n  const loansResponse = await fetch(`${API_URL}/my-loans`, {\n    headers: getDistributorAuthHeaders(),\n    ...defaultFetchOptions\n  });\n  if (!loansResponse.ok) throw new Error('Failed to fetch loans');\n  const loans = await loansResponse.json();\n\n  // Obtener información de productos\n  const productsResponse = await fetch(`${API_URL}/products/`, {\n    headers: getDistributorAuthHeaders(),\n    ...defaultFetchOptions\n  });\n  if (!productsResponse.ok) throw new Error('Failed to fetch products');\n  const productData = await productsResponse.json();\n  const products = Array.isArray(productData) ? productData : productData.products || [];\n  const loansWithProducts = loans.map(loan => ({\n    ...loan,\n    product: products.find(p => p.id === loan.product_id) || null\n  }));\n\n  // Como el distribuidor ya está autenticado, creamos un objeto distribuidor placeholder\n  // En un escenario real, podrías obtener la información del distribuidor desde el token JWT o un endpoint específico\n  const distributor = {\n    id: 1,\n    // Este valor será el correcto desde el token JWT\n    name: \"Distribuidor Autenticado\",\n    access_code: accessCode,\n    contact_info: \"\"\n  };\n  return {\n    loans: loansWithProducts,\n    distributor\n  };\n};\nexport const postConsignmentReport = async reportData => {\n  return apiRequest('/consignments/reports', {\n    method: 'POST',\n    headers: getDistributorAuthHeaders(),\n    body: JSON.stringify(reportData)\n  });\n};\n\n// Función para buscar productos\nexport const searchProducts = async query => {\n  return apiRequest(`/products/search?q=${encodeURIComponent(query)}`);\n};\n\n// Función para eliminar producto\nexport const deleteProduct = async productId => {\n  return apiRequest(`/products/${productId}`, {\n    method: 'DELETE'\n  });\n};\n\n// Función para obtener un producto específico\nexport const getProduct = async productId => {\n  return apiRequest(`/products/${productId}`);\n};\n\n// Función para verificar disponibilidad de SKU\nexport const checkSkuAvailability = async sku => {\n  return apiRequest(`/products/check-sku/${encodeURIComponent(sku)}`);\n};\n\n// Función para obtener sugerencias de nombres de productos\nexport const getProductNameSuggestions = async (query, limit = 8) => {\n  return apiRequest(`/products/suggest-names?q=${encodeURIComponent(query)}&limit=${limit}`);\n};\n\n// Función para obtener estadísticas\nexport const getStats = async () => {\n  return apiRequest('/stats');\n};\n\n// Función para obtener distribuidores\nexport const getDistributors = async () => {\n  return apiRequest('/distributors/');\n};\n\n// Función para crear distribuidor\nexport const createDistributor = async distributor => {\n  return apiRequest('/distributors/', {\n    method: 'POST',\n    body: JSON.stringify(distributor)\n  });\n};\n\n// Función para actualizar distribuidor\nexport const updateDistributor = async (distributorId, distributor) => {\n  return apiRequest(`/distributors/${distributorId}`, {\n    method: 'PUT',\n    body: JSON.stringify(distributor)\n  });\n};\n\n// Función para obtener préstamos de un distribuidor\nexport const getDistributorLoans = async distributorId => {\n  return apiRequest(`/distributors/${distributorId}/loans`);\n};\n\n// Función para crear préstamo de consignación\nexport const createConsignmentLoan = async loan => {\n  return apiRequest('/consignments/loans', {\n    method: 'POST',\n    body: JSON.stringify(loan)\n  });\n};\n\n// Función para verificar estado de autenticación\nexport const verifyAuth = async () => {\n  return apiRequest('/verify');\n};\n\n// Función para obtener perfil de usuario\nexport const getUserProfile = async () => {\n  return apiRequest('/users/me');\n};\n\n// Función helper para manejo de errores de red\nexport const handleApiError = error => {\n  if (error.message.includes('Network error')) {\n    return 'Error de conexión. Verifica tu conexión a internet e intenta nuevamente.';\n  }\n  if (error.message.includes('Session expired')) {\n    return 'Tu sesión ha expirado. Por favor, inicia sesión nuevamente.';\n  }\n  if (error.message.includes('Access forbidden')) {\n    return 'No tienes permisos para realizar esta acción.';\n  }\n  if (error.message.includes('Server error')) {\n    return 'Error del servidor. Por favor, intenta más tarde.';\n  }\n  return error.message || 'Ha ocurrido un error inesperado.';\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getAuthHeaders","getDistributorAuthHeaders","defaultFetchOptions","credentials","apiRequest","endpoint","options","url","startsWith","config","headers","response","fetch","status","refreshToken","retryResponse","ok","Error","json","refreshError","window","location","href","errorData","detail","message","parseError","contentType","get","includes","error","loginUser","username","password","details","formBody","Object","keys","map","key","encodeURIComponent","join","method","body","loginDistributor","accessCode","logoutUser","getProducts","skip","limit","getAllProducts","products","createProduct","product","JSON","stringify","updateProduct","productId","postSale","saleData","getDistributorLoansByAccessCode","loansResponse","loans","productsResponse","productData","Array","isArray","loansWithProducts","loan","find","p","id","product_id","distributor","name","access_code","contact_info","postConsignmentReport","reportData","searchProducts","query","deleteProduct","getProduct","checkSkuAvailability","sku","getProductNameSuggestions","getStats","getDistributors","createDistributor","updateDistributor","distributorId","getDistributorLoans","createConsignmentLoan","verifyAuth","getUserProfile","handleApiError"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/services/api.ts"],"sourcesContent":["// /frontend/src/services/api.ts\nimport { Product, SalePayload, ConsignmentReportPayload, Distributor, ConsignmentLoan } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Función para obtener headers de autenticación (ahora con cookies)\nconst getAuthHeaders = () => {\n    return {\n        'Content-Type': 'application/json',\n        // Las cookies se envían automáticamente con credentials: 'include'\n    };\n};\n\nconst getDistributorAuthHeaders = () => {\n    return {\n        'Content-Type': 'application/json',\n        // Las cookies se envían automáticamente con credentials: 'include'\n    };\n};\n\n// Configuración por defecto para todas las peticiones\nconst defaultFetchOptions = {\n    credentials: 'include' as RequestCredentials, // Incluir cookies en todas las peticiones\n};\n\n// Función helper para hacer peticiones a la API con manejo de errores estandarizado\nexport const apiRequest = async <T = any>(\n    endpoint: string,\n    options: RequestInit = {}\n): Promise<T> => {\n    const url = endpoint.startsWith('http') ? endpoint : `${API_URL}${endpoint}`;\n    \n    const config: RequestInit = {\n        ...defaultFetchOptions,\n        headers: {\n            ...getAuthHeaders(),\n            ...options.headers,\n        },\n        ...options,\n    };\n\n    try {\n        const response = await fetch(url, config);\n        \n        // Manejar diferentes códigos de estado\n        if (response.status === 401) {\n            // Token expirado o inválido\n            try {\n                await refreshToken();\n                // Reintentar la petición original con el token refrescado\n                const retryResponse = await fetch(url, config);\n                if (!retryResponse.ok) {\n                    throw new Error(`Request failed with status ${retryResponse.status}`);\n                }\n                return retryResponse.json();\n            } catch (refreshError) {\n                // Si falla el refresh, redirigir al login\n                window.location.href = '/login';\n                throw new Error('Session expired. Please login again.');\n            }\n        }\n        \n        if (response.status === 403) {\n            throw new Error('Access forbidden. You do not have permission to perform this action.');\n        }\n        \n        if (response.status === 404) {\n            throw new Error('Resource not found.');\n        }\n        \n        if (response.status >= 500) {\n            throw new Error('Server error. Please try again later.');\n        }\n        \n        if (!response.ok) {\n            // Intentar obtener el mensaje de error del servidor\n            try {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || errorData.message || `Request failed with status ${response.status}`);\n            } catch (parseError) {\n                throw new Error(`Request failed with status ${response.status}`);\n            }\n        }\n        \n        // Si la respuesta está vacía, devolver null\n        const contentType = response.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n            return null as T;\n        }\n        \n        return response.json();\n        \n    } catch (error) {\n        if (error instanceof Error) {\n            throw error;\n        }\n        throw new Error('Network error. Please check your connection and try again.');\n    }\n};\n\n// --- Funciones de Autenticación ---\nexport const loginUser = async (username: string, password: string): Promise<{ access_token: string; token_type: string }> => {\n    const details = {\n        username: username,\n        password: password,\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key as keyof typeof details])).join('&');\n\n    const response = await fetch(`${API_URL}/token`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formBody,\n        credentials: 'include', // Incluir cookies para recibir el token\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Login failed');\n    }\n    return response.json();\n};\n\nexport const loginDistributor = async (username: string, accessCode: string): Promise<{ access_token: string; token_type: string }> => {\n    const details = {\n        username: username,\n        password: accessCode, // Usamos password para el access_code en el formulario\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key as keyof typeof details])).join('&');\n\n    const response = await fetch(`${API_URL}/distributor-token`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formBody,\n        credentials: 'include', // Incluir cookies para recibir el token\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Distributor login failed');\n    }\n    return response.json();\n};\n\n// Función para refrescar el token\nexport const refreshToken = async (): Promise<{ access_token: string; token_type: string }> => {\n    const response = await fetch(`${API_URL}/refresh`, {\n        method: 'POST',\n        credentials: 'include',\n    });\n\n    if (!response.ok) {\n        throw new Error('Failed to refresh token');\n    }\n    return response.json();\n};\n\n// Función para cerrar sesión\nexport const logoutUser = async (): Promise<void> => {\n    await fetch(`${API_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include',\n    });\n};\n\n// --- Funciones de la API ---\n\n// Productos\n// Interfaz para la respuesta paginada de productos\ninterface ProductListResponse {\n    products: Product[];\n    total: number;\n    skip: number;\n    limit: number;\n    has_next: boolean;\n}\n\nexport const getProducts = async (skip: number = 0, limit: number = 20): Promise<ProductListResponse> => {\n    return apiRequest<ProductListResponse>(`/products/?skip=${skip}&limit=${limit}`);\n};\n\n// Mantener la función anterior para compatibilidad\nexport const getAllProducts = async (): Promise<Product[]> => {\n    const response = await getProducts(0, 1000); // Obtener muchos productos\n    return response.products;\n};\n\nexport const createProduct = async (product: Product): Promise<Product> => {\n    return apiRequest<Product>('/products/', {\n        method: 'POST',\n        body: JSON.stringify(product),\n    });\n};\n\nexport const updateProduct = async (productId: number, product: Partial<Product>): Promise<Product> => {\n    return apiRequest<Product>(`/products/${productId}`, {\n        method: 'PUT',\n        body: JSON.stringify(product),\n    });\n};\n\n// Ventas\nexport const postSale = async (saleData: SalePayload): Promise<any> => {\n    return apiRequest('/pos/sales', {\n        method: 'POST',\n        body: JSON.stringify(saleData),\n    });\n};\n\n// Consignación\nexport const getDistributorLoansByAccessCode = async (accessCode: string): Promise<{ loans: ConsignmentLoan[], distributor: Distributor }> => {\n    // Ahora usamos el endpoint específico para distribuidores autenticados\n    const loansResponse = await fetch(`${API_URL}/my-loans`, {\n        headers: getDistributorAuthHeaders(),\n        ...defaultFetchOptions,\n    });\n    if (!loansResponse.ok) throw new Error('Failed to fetch loans');\n    const loans: ConsignmentLoan[] = await loansResponse.json();\n    \n    // Obtener información de productos\n    const productsResponse = await fetch(`${API_URL}/products/`, {\n        headers: getDistributorAuthHeaders(),\n        ...defaultFetchOptions,\n    });\n    if (!productsResponse.ok) throw new Error('Failed to fetch products');\n    const productData = await productsResponse.json();\n    const products: Product[] = Array.isArray(productData) ? productData : productData.products || [];\n    \n    const loansWithProducts = loans.map(loan => ({\n        ...loan,\n        product: products.find(p => p.id === loan.product_id) || null\n    }));\n\n    // Como el distribuidor ya está autenticado, creamos un objeto distribuidor placeholder\n    // En un escenario real, podrías obtener la información del distribuidor desde el token JWT o un endpoint específico\n    const distributor: Distributor = {\n        id: 1, // Este valor será el correcto desde el token JWT\n        name: \"Distribuidor Autenticado\",\n        access_code: accessCode,\n        contact_info: \"\"\n    };\n\n    return { loans: loansWithProducts, distributor };\n};\n\nexport const postConsignmentReport = async (reportData: ConsignmentReportPayload): Promise<any> => {\n    return apiRequest('/consignments/reports', {\n        method: 'POST',\n        headers: getDistributorAuthHeaders(),\n        body: JSON.stringify(reportData),\n    });\n};\n\n// Función para buscar productos\nexport const searchProducts = async (query: string): Promise<Product[]> => {\n    return apiRequest<Product[]>(`/products/search?q=${encodeURIComponent(query)}`);\n};\n\n// Función para eliminar producto\nexport const deleteProduct = async (productId: number): Promise<void> => {\n    return apiRequest<void>(`/products/${productId}`, {\n        method: 'DELETE',\n    });\n};\n\n// Función para obtener un producto específico\nexport const getProduct = async (productId: number): Promise<Product> => {\n    return apiRequest<Product>(`/products/${productId}`);\n};\n\n// Función para verificar disponibilidad de SKU\nexport const checkSkuAvailability = async (sku: string): Promise<{\n    sku: string;\n    available: boolean;\n    exists: boolean;\n    message: string;\n}> => {\n    return apiRequest(`/products/check-sku/${encodeURIComponent(sku)}`);\n};\n\n// Función para obtener sugerencias de nombres de productos\nexport const getProductNameSuggestions = async (query: string, limit: number = 8): Promise<{\n    query: string;\n    suggestions: string[];\n}> => {\n    return apiRequest(`/products/suggest-names?q=${encodeURIComponent(query)}&limit=${limit}`);\n};\n\n// Función para obtener estadísticas\nexport const getStats = async (): Promise<any> => {\n    return apiRequest('/stats');\n};\n\n// Función para obtener distribuidores\nexport const getDistributors = async (): Promise<Distributor[]> => {\n    return apiRequest<Distributor[]>('/distributors/');\n};\n\n// Función para crear distribuidor\nexport const createDistributor = async (distributor: Omit<Distributor, 'id'>): Promise<Distributor> => {\n    return apiRequest<Distributor>('/distributors/', {\n        method: 'POST',\n        body: JSON.stringify(distributor),\n    });\n};\n\n// Función para actualizar distribuidor\nexport const updateDistributor = async (distributorId: number, distributor: Partial<Distributor>): Promise<Distributor> => {\n    return apiRequest<Distributor>(`/distributors/${distributorId}`, {\n        method: 'PUT',\n        body: JSON.stringify(distributor),\n    });\n};\n\n// Función para obtener préstamos de un distribuidor\nexport const getDistributorLoans = async (distributorId: number): Promise<ConsignmentLoan[]> => {\n    return apiRequest<ConsignmentLoan[]>(`/distributors/${distributorId}/loans`);\n};\n\n// Función para crear préstamo de consignación\nexport const createConsignmentLoan = async (loan: Omit<ConsignmentLoan, 'id'>): Promise<ConsignmentLoan> => {\n    return apiRequest<ConsignmentLoan>('/consignments/loans', {\n        method: 'POST',\n        body: JSON.stringify(loan),\n    });\n};\n\n// Función para verificar estado de autenticación\nexport const verifyAuth = async (): Promise<{ username: string; role: string }> => {\n    return apiRequest<{ username: string; role: string }>('/verify');\n};\n\n// Función para obtener perfil de usuario\nexport const getUserProfile = async (): Promise<any> => {\n    return apiRequest('/users/me');\n};\n\n// Función helper para manejo de errores de red\nexport const handleApiError = (error: Error): string => {\n    if (error.message.includes('Network error')) {\n        return 'Error de conexión. Verifica tu conexión a internet e intenta nuevamente.';\n    }\n    if (error.message.includes('Session expired')) {\n        return 'Tu sesión ha expirado. Por favor, inicia sesión nuevamente.';\n    }\n    if (error.message.includes('Access forbidden')) {\n        return 'No tienes permisos para realizar esta acción.';\n    }\n    if (error.message.includes('Server error')) {\n        return 'Error del servidor. Por favor, intenta más tarde.';\n    }\n    return error.message || 'Ha ocurrido un error inesperado.';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}