{"ast":null,"code":"var _jsxFileName = \"/Users/user/TuAppDeAccesorios/frontend/src/context/AuthContext.tsx\";\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRole, setUserRole] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Verificar estado de autenticación al cargar\n  useEffect(() => {\n    // Solo verificar si hay cookies que sugieren autenticación previa\n    if (document.cookie.includes('access_token')) {\n      checkAuthStatus();\n    } else {\n      setIsInitialized(true);\n    }\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      const response = await fetch(`${API_URL}/verify`, {\n        method: 'GET',\n        credentials: 'include',\n        // Incluir cookies httpOnly\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        console.log('Auth verification response:', userData);\n        setIsAuthenticated(true);\n        setUserRole(userData.role);\n        setIsInitialized(true);\n        return true;\n      } else {\n        console.log('Auth verification failed:', response.status);\n        setIsAuthenticated(false);\n        setUserRole(null);\n        setIsInitialized(true);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      setIsAuthenticated(false);\n      setUserRole(null);\n      setIsInitialized(true);\n      return false;\n    }\n  };\n  const login = async () => {\n    return await checkAuthStatus();\n  };\n  const logout = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      await fetch(`${API_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setUserRole(null);\n    }\n  };\n\n  // No renderizar hasta que se inicialice el estado de auth\n  if (!isInitialized) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRole,\n      login,\n      logout,\n      checkAuthStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Hook para refrescar automáticamente el token\nexport const useTokenRefresh = () => {\n  const {\n    logout,\n    checkAuthStatus\n  } = useAuth();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const response = await fetch(`${API_URL}/refresh`, {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          // Si falla el refresh, verificar estado y cerrar sesión si es necesario\n          const isAuthenticated = await checkAuthStatus();\n          if (!isAuthenticated) {\n            logout();\n          }\n        }\n      } catch (error) {\n        console.error('Error refreshing token:', error);\n        // Verificar estado de autenticación\n        const isAuthenticated = await checkAuthStatus();\n        if (!isAuthenticated) {\n          logout();\n        }\n      }\n    }, 14 * 60 * 1000); // Refrescar cada 14 minutos (antes de que expire a los 15)\n\n    return () => clearInterval(interval);\n  }, [logout, checkAuthStatus]);\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","isAuthenticated","setIsAuthenticated","userRole","setUserRole","isInitialized","setIsInitialized","document","cookie","includes","checkAuthStatus","API_URL","process","env","REACT_APP_API_URL","response","fetch","method","credentials","headers","ok","userData","json","console","log","role","status","error","login","logout","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","useAuth","context","Error","useTokenRefresh","interval","setInterval","clearInterval"],"sources":["/Users/user/TuAppDeAccesorios/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  userRole: string | null;\n  login: () => Promise<boolean>;\n  logout: () => void;\n  checkAuthStatus: () => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [userRole, setUserRole] = useState<string | null>(null);\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n\n  // Verificar estado de autenticación al cargar\n  useEffect(() => {\n    // Solo verificar si hay cookies que sugieren autenticación previa\n    if (document.cookie.includes('access_token')) {\n      checkAuthStatus();\n    } else {\n      setIsInitialized(true);\n    }\n  }, []);\n\n  const checkAuthStatus = async (): Promise<boolean> => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      const response = await fetch(`${API_URL}/verify`, {\n        method: 'GET',\n        credentials: 'include', // Incluir cookies httpOnly\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        console.log('Auth verification response:', userData);\n        setIsAuthenticated(true);\n        setUserRole(userData.role);\n        setIsInitialized(true);\n        return true;\n      } else {\n        console.log('Auth verification failed:', response.status);\n        setIsAuthenticated(false);\n        setUserRole(null);\n        setIsInitialized(true);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      setIsAuthenticated(false);\n      setUserRole(null);\n      setIsInitialized(true);\n      return false;\n    }\n  };\n\n  const login = async (): Promise<boolean> => {\n    return await checkAuthStatus();\n  };\n\n  const logout = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      await fetch(`${API_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setUserRole(null);\n    }\n  };\n\n  // No renderizar hasta que se inicialice el estado de auth\n  if (!isInitialized) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, userRole, login, logout, checkAuthStatus }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Hook para refrescar automáticamente el token\nexport const useTokenRefresh = () => {\n  const { logout, checkAuthStatus } = useAuth();\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const response = await fetch(`${API_URL}/refresh`, {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (!response.ok) {\n          // Si falla el refresh, verificar estado y cerrar sesión si es necesario\n          const isAuthenticated = await checkAuthStatus();\n          if (!isAuthenticated) {\n            logout();\n          }\n        }\n      } catch (error) {\n        console.error('Error refreshing token:', error);\n        // Verificar estado de autenticación\n        const isAuthenticated = await checkAuthStatus();\n        if (!isAuthenticated) {\n          logout();\n        }\n      }\n    }, 14 * 60 * 1000); // Refrescar cada 14 minutos (antes de que expire a los 15)\n\n    return () => clearInterval(interval);\n  }, [logout, checkAuthStatus]);\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAaC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC/E,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAU,KAAK,CAAC;EACtE,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAU,KAAK,CAAC;;EAElE;EACAE,SAAS,CAAC,MAAM;IACd;IACA,IAAIa,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;MAC5CC,eAAe,CAAC,CAAC;IACnB,CAAC,MAAM;MACLJ,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,eAAe,GAAG,MAAAA,CAAA,KAA8B;IACpD,IAAI;MACF,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;MACxE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,SAAS,EAAE;QAChDM,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE,SAAS;QAAE;QACxBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACf,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QACtCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,QAAQ,CAAC;QACpDnB,kBAAkB,CAAC,IAAI,CAAC;QACxBE,WAAW,CAACiB,QAAQ,CAACI,IAAI,CAAC;QAC1BnB,gBAAgB,CAAC,IAAI,CAAC;QACtB,OAAO,IAAI;MACb,CAAC,MAAM;QACLiB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAET,QAAQ,CAACW,MAAM,CAAC;QACzDxB,kBAAkB,CAAC,KAAK,CAAC;QACzBE,WAAW,CAAC,IAAI,CAAC;QACjBE,gBAAgB,CAAC,IAAI,CAAC;QACtB,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDzB,kBAAkB,CAAC,KAAK,CAAC;MACzBE,WAAW,CAAC,IAAI,CAAC;MACjBE,gBAAgB,CAAC,IAAI,CAAC;MACtB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMsB,KAAK,GAAG,MAAAA,CAAA,KAA8B;IAC1C,OAAO,MAAMlB,eAAe,CAAC,CAAC;EAChC,CAAC;EAED,MAAMmB,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMlB,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;MACxE,MAAME,KAAK,CAAC,GAAGL,OAAO,SAAS,EAAE;QAC/BM,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE,SAAS;QACtBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACRzB,kBAAkB,CAAC,KAAK,CAAC;MACzBE,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;;EAED;EACA,IAAI,CAACC,aAAa,EAAE;IAClB,oBAAOT,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACErC,OAAA,CAACC,WAAW,CAACqC,QAAQ;IAACC,KAAK,EAAE;MAAElC,eAAe;MAAEE,QAAQ;MAAEyB,KAAK;MAAEC,MAAM;MAAEnB;IAAgB,CAAE;IAAAV,QAAA,EACxFA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAED,OAAO,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAG5C,UAAU,CAACI,WAAW,CAAC;EACvC,IAAIwC,OAAO,KAAKvC,SAAS,EAAE;IACzB,MAAM,IAAIwC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAM;IAAEV,MAAM;IAAEnB;EAAgB,CAAC,GAAG0B,OAAO,CAAC,CAAC;EAE7C1C,SAAS,CAAC,MAAM;IACd,MAAM8C,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,IAAI;QACF,MAAM9B,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;QACxE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,UAAU,EAAE;UACjDM,MAAM,EAAE,MAAM;UACdC,WAAW,EAAE,SAAS;UACtBC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UAChB;UACA,MAAMnB,eAAe,GAAG,MAAMS,eAAe,CAAC,CAAC;UAC/C,IAAI,CAACT,eAAe,EAAE;YACpB4B,MAAM,CAAC,CAAC;UACV;QACF;MACF,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;QACA,MAAM1B,eAAe,GAAG,MAAMS,eAAe,CAAC,CAAC;QAC/C,IAAI,CAACT,eAAe,EAAE;UACpB4B,MAAM,CAAC,CAAC;QACV;MACF;IACF,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;;IAEpB,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACX,MAAM,EAAEnB,eAAe,CAAC,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}