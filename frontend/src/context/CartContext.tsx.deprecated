import React, { createContext, useContext, useState, useCallback } from 'react';
import { CartItem } from '../types';

interface CartContextType {
    cart: CartItem[];
    addToCart: (product: any) => void;
    removeFromCart: (productId: number) => void;
    clearCart: () => void;
    totalAmount: number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [cart, setCart] = useState<CartItem[]>([]);

    const addToCart = useCallback((product: any) => {
        console.log('ðŸ›’ Agregando producto al carrito:', product.name);
        setCart(prevCart => {
            const existingItem = prevCart.find(item => item.id === product.id);
            if (existingItem) {
                if (existingItem.quantity_in_cart < product.stock_quantity) {
                    return prevCart.map(item =>
                        item.id === product.id
                            ? { ...item, quantity_in_cart: item.quantity_in_cart + 1 }
                            : item
                    );
                } else {
                    alert(`No hay suficiente stock para ${product.name}. Stock actual: ${product.stock_quantity}`);
                    return prevCart;
                }
            } else {
                if (product.stock_quantity > 0) {
                    return [...prevCart, { ...product, quantity_in_cart: 1 }];
                } else {
                    alert(`El producto ${product.name} no tiene stock.`);
                    return prevCart;
                }
            }
        });
    }, []);

    const removeFromCart = useCallback((productId: number) => {
        console.log('ðŸ›’ Removiendo producto del carrito:', productId);
        setCart(prevCart => prevCart.filter(item => item.id !== productId));
    }, []);

    const clearCart = useCallback(() => {
        console.log('ðŸ›’ LIMPIANDO CARRITO COMPLETAMENTE');
        setCart([]);
    }, []);

    const totalAmount = cart.reduce((acc, item) => acc + item.selling_price * item.quantity_in_cart, 0);

    const value = {
        cart,
        addToCart,
        removeFromCart,
        clearCart,
        totalAmount
    };

    return (
        <CartContext.Provider value={value}>
            {children}
        </CartContext.Provider>
    );
};

export const useCart = () => {
    const context = useContext(CartContext);
    if (context === undefined) {
        throw new Error('useCart must be used within a CartProvider');
    }
    return context;
};