#!/usr/bin/env python3
"""
Script para aplicar optimizaciones de base de datos y verificar configuraci√≥n
"""
import os
import sys
import psycopg2
from sqlalchemy import create_engine, text
from pathlib import Path

# Agregar el directorio backend al path
sys.path.append(str(Path(__file__).parent / "backend"))

from backend.app.config import settings
from backend.app.logging_config import get_logger

logger = get_logger(__name__)

def apply_database_indexes():
    """Aplica los √≠ndices optimizados a la base de datos"""
    
    try:
        # Crear engine de base de datos
        engine = create_engine(settings.database_url)
        
        # Leer script de √≠ndices
        indexes_file = Path(__file__).parent / "database" / "create_indexes.sql"
        
        if not indexes_file.exists():
            logger.error(f"Archivo de √≠ndices no encontrado: {indexes_file}")
            return False
        
        with open(indexes_file, 'r', encoding='utf-8') as f:
            indexes_sql = f.read()
        
        # Ejecutar script de √≠ndices
        with engine.connect() as conn:
            logger.info("Aplicando √≠ndices optimizados...")
            
            # Dividir por declaraciones individuales
            statements = [stmt.strip() for stmt in indexes_sql.split(';') if stmt.strip()]
            
            for statement in statements:
                if statement.upper().startswith(('CREATE INDEX', 'ANALYZE')):
                    try:
                        conn.execute(text(statement))
                        logger.info(f"Ejecutado: {statement[:50]}...")
                    except Exception as e:
                        if "already exists" in str(e):
                            logger.info(f"√çndice ya existe: {statement[:50]}...")
                        else:
                            logger.warning(f"Error ejecutando: {statement[:50]}... - {e}")
            
            conn.commit()
            logger.info("‚úÖ √çndices aplicados exitosamente")
            return True
            
    except Exception as e:
        logger.error(f"Error aplicando √≠ndices: {e}")
        return False

def verify_optimizations():
    """Verifica que las optimizaciones est√©n funcionando"""
    
    checks = []
    
    # Verificar conexi√≥n a Redis
    try:
        from backend.app.cache import cache_manager
        client = cache_manager.get_sync_client()
        client.ping()
        checks.append("‚úÖ Conexi√≥n Redis: OK")
    except Exception as e:
        checks.append(f"‚ùå Conexi√≥n Redis: {e}")
    
    # Verificar rate limiting
    try:
        from backend.app.rate_limiter import rate_limiter
        if rate_limiter.enabled:
            checks.append("‚úÖ Rate Limiting: Habilitado")
        else:
            checks.append("‚ö†Ô∏è Rate Limiting: Deshabilitado")
    except Exception as e:
        checks.append(f"‚ùå Rate Limiting: {e}")
    
    # Verificar configuraci√≥n de base de datos
    try:
        engine = create_engine(settings.database_url)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'"))
            table_count = result.scalar()
            checks.append(f"‚úÖ Base de datos: {table_count} tablas encontradas")
    except Exception as e:
        checks.append(f"‚ùå Base de datos: {e}")
    
    # Verificar √≠ndices
    try:
        engine = create_engine(settings.database_url)
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT COUNT(*) 
                FROM pg_indexes 
                WHERE schemaname = 'public' 
                AND indexname LIKE 'idx_%'
            """))
            index_count = result.scalar()
            checks.append(f"‚úÖ √çndices personalizados: {index_count} encontrados")
    except Exception as e:
        checks.append(f"‚ùå √çndices: {e}")
    
    return checks

def main():
    """Funci√≥n principal"""
    
    print("üöÄ Aplicando optimizaciones de TuAppDeAccesorios...")
    print("=" * 60)
    
    # Solo aplicar √≠ndices si es PostgreSQL
    if "postgresql" in settings.database_url:
        print("\nüìä Aplicando √≠ndices de base de datos...")
        if apply_database_indexes():
            print("‚úÖ √çndices aplicados exitosamente")
        else:
            print("‚ùå Error aplicando √≠ndices")
    else:
        print("‚ö†Ô∏è Base de datos no es PostgreSQL, omitiendo √≠ndices")
    
    print("\nüîç Verificando optimizaciones...")
    checks = verify_optimizations()
    
    for check in checks:
        print(f"  {check}")
    
    print("\n" + "=" * 60)
    print("üéØ Optimizaciones completadas")
    
    print("\nüìù Pr√≥ximos pasos para producci√≥n:")
    print("  1. Configurar variables de entorno en Render (ver RENDER_SETUP.md)")
    print("  2. Verificar CORS_ORIGINS con tu dominio real")
    print("  3. Habilitar monitoreo y alertas")
    print("  4. Configurar backups autom√°ticos")

if __name__ == "__main__":
    main()